#+STARTUP: indent
#+STARTUP: overview
#+STARTUP: logdone

* EC-JSON

EC-JSON is a simple JSON encoder for Common Lisp, originally intended
for use in [[https://github.com/peterloleungyau/cl-plotly][cl-plotly]] to generate the [[https://plotly.com/javascript/getting-started/][plotly]] interactive graphs. Since
plotly graphs are described by Javascript values, it could be
generated nicely with JSON. But this simple JSON encoder could also be
used for other simple purpose, so it is split into a separate library.

** Quick Examples
Here are some examples to quickly give an idea of the JSON output.

- basic values, in a vector
#+begin_src lisp
  ;; main function, by default prints to *json-output* which is by default a synonym stream of *standard-output*
  (ec-json:print-as-json #(t :true :false nil :null 123 2/3 3.14 "Hello" World :|Mixed-Case|))
#+end_src

#+begin_src javascript
  [true, true, false, {}, null, 123, 0.6666667, 3.14, "Hello", "world", "Mixed-Case"]
#+end_src

- plist and alist as JSON object, key conversion
#+begin_src lisp
  (ec-json:print-as-json
   '(:abc #()
     :Alist ((:a . 1) ("Hello" . 2))
     :|Array| #(101 102 103)))
#+end_src

#+begin_src javascript
  {"abc":[], "alist":{"a":1, "Hello":2}, "Array":[101, 102, 103]}
#+end_src

- hash-table, some lists regarded as array, special value

By default, for duplicate keys, retain only the first one. For
hash-table, can still result in duplicate keys due to key
conversions. =json-value= can output anything you like.

#+begin_src lisp
  (ec-json:print-as-json
   (let ((h (make-hash-table :test 'equal)))
     (setf (gethash "WhatEver" h) (ec-json:make-json-value :print-form "I_Like")
           (gethash :same-key h) '(:a 1 :b 2 :a 3)
           (gethash "same-key" h) '(10 9 8)
           (gethash :|same-key| h) ())
     h))
#+end_src

#+begin_src javascript
  {"WhatEver":I_Like, "same-key":{"a":1, "b":2}, "same-key":[10, 9, 8], "same-key":{}}
#+end_src
** Installation

*** With Quicklisp
The simplest way is to use [[https://www.quicklisp.org/beta/][Quicklisp]].

1. First clone this project into Quicklisp's local-projects directory =~/quicklist/local-projects/=

2. Then in Lisp REPL, can load with

#+begin_src lisp
  (ql:quickload :ec-json)
#+end_src

*** With ASDF
For more traditional [[https://asdf.common-lisp.dev/][ASDF]] configuration, you may do the following:

1. First clone this project into any of the local directories
   configured with ASDF. E.g. look at =asdf:*central-registry*= in
   Lisp REPL to see the configured directories.

2. Then in Lisp REPL, can load with

#+begin_src lisp
  (asdf:load-system :ec-json)
#+end_src

** Usage

*** Value Mapping
| From Lisp           | To JSON                   | Remarks                                               |
|---------------------+---------------------------+-------------------------------------------------------|
| =T=                 | =true=                    |                                                       |
| =:true=             | =true=                    |                                                       |
| =:false=            | =false=                   |                                                       |
| =NIL=               | ={}=                      | Empty object                                          |
| =:null=             | =null=                    |                                                       |
| integer             | integer                   |                                                       |
| real number         | real number               | Ratio is printed as single-float                      |
| string              | string                    | Properly escaped JSON string.                         |
| =#(v1 v2 ...)=      | =[v1, v2, ...]=           | Each value in the array is recursively output.        |
| =#()=               | []                        |                                                       |
| =JSON-VALUE=        | verbatim                  | Can control the exact thing printed.                  |
| symbol              | string                    | Possibly with case conversion                         |
| hash table          | ={"k1":v1, "k2":v2, ...}= | Order not guaranteed.                                 |
| =(k1 v1 k2 v2 ...)= | ={"k1":v1, "k2":v2, ...}= | Plist, =k1= either symbol or string.                  |
| =((k1 . v1) ...)=   | ={"k1":v1, ...}=          | Alist, keys may be case converted                     |
| =plist-json-obj=    | object                    | Force to treat list as plist.                         |
| =alist-json-obj=    | object                    | Force to treat list as alist.                         |
| =(v1 v2 ...)=       | =[v1, v2, ...]=           | If =v1= is neither symbol nor string, treat as array. |

**** =T=, =NIL= and null
Since in Common Lisp, =NIL= means both false and empty list, we
therefore treat =NIL= as empty list, and map to the empty JSON object
={}=. We instead uses =:false= to map to JSON false, and uses =:null=
to map to JSON null. For completeness, we also allow =:true= to map to
JSON true, and the Lisp true =T= of course maps to JOSN true.

**** Mapping Lisp list
A Lisp list may be guessed as either:

- plist (property list): if the first item is a symbol (normal symbol
  or keyword, even =:true=, =:false= or =:null=) or string. Maps to
  JSON object.

- alist (association list): if the first item is a cons. Maps to JSON
  object.

- array (single dimension): if the first item is neither symbol nor
  string. Therefore a list of numbers is mapped to JSON array of
  numbers, which is convenient. For other kinds of values, we
  recommend coercing to Lisp array to ensure that it is output as JSON
  array.

For the special case of empty Lisp list (i.e. =NIL= or =()=), we
choose to map to empty JSON object ={}=.

Note that if you want to force a list to be treated as plist or alist,
you may create =plist-jsob-obj= or =alist-json-obj= wrapper over the
list respectively (which works for lists nested in other structures),
or use specific printing functions =print-plist-as-json= or
=print-alist-as-json= (which only works for top-level value to the
function).

**** Case conversion for symbols
In Lisp, a keyword symbol or plain symbol is often used as keys in
hash-table, plist or alist.

Symbols in Lisp are by default read as upper case, and characters in
Lisp may be lower case, upper case, or neither. It may be more common
to use lower case for keys in JSON (e.g. plotly), so we may want to
perform case conversion for symbols so that we need not write symbols
as =:|hello|= to get "hello", or =:|World|= to get "World".

By default, we use string as is, and for symbols, convert to lower
case unless it is mixed case. This should be usable for most cases,
but the case conversion can be customized in a few ways, as described
below.

For flexibility, the string form of a key =k= is obtained through
=(funcall *key-as-str-func* k)=, where the customizable special
variable is a function to return the desired string form of the key,
performing any desired case conversion. By default,
=*key-as-str-func*= is =#'key-as-string=, described as follows.

The function =key-as-string= leaves string as is, therefore, by
default, you may use string as key to get the exact case you want. For
symbols, the behavior is controlled by the special variable
=*how-to-convert-key-case*=.

  - Possible values of =*how-to-convert-key-case*=:

    - =:lower-unless-mixed-case=: the default, which would convert the symbol name to lower case if not mixed case.

      - with both upper and lower case: use symbol-name as is.

      - otherwise: convert the symbol-name to lower case.

        NOTE: in the implementation, we use the symbol name as is if it
        has any lower case character, because then it is either mixed
        case, or already has not upper case letter that need
        conversions.

    - =:as-is=: will use the symbol-name as is.

    - =:lower=: always convert the symbol-name to lower case.

  - Caching of case conversion (=key-as-string=)

    If =*how-to-convert-key-case*= is not =:as-is=, =key-as-string=
    will memoize the conversion of the function =convert-key-to-str=
    (according to =*how-to-convert-key-case*=) in the hash-table
    =*convert-key-to-str*=. Therefore, you may pre-fill
    =*convert-key-to-str*=, or replace it with another suitable
    hash-table, to get the desired case for a selected set of symbols.

**** Duplicate keys in objects
JSON does not clearly specify whether duplicate keys in JSON object is
allowed, some JSON parsers raises error on duplicate object keys, some
libraries take the last seen key. Therefore, for flexibility, we allow
optionally outputing duplicate keys from plist or alist to JSON
object. This behavior is controlled by =*allow-dup-keys*=, which if
true, will just output the keys in plist or alist in the order they
appear; and if =*allow-dup-keys*= is false (i.e. =NIL=, which is the
default), will output the key that appears first. This is so that we
may prepend to the front of plist or alist to override some values for
the output JSON, while sharing most of the list structure.

Note that for hash-table, since the keys do not have natural order,
its output is not affected by =*allow-dup-keys*=. However, since the
keys need to be converted to string as JSON keys, it is therefore
still end up with duplciate keys for hash-table, e.g. different
symbols end up converting to the same string as key.

For one top-level value, you may explicitly call
=print-alist-as-json-no-dup-keys= for alist,
=print-plist-as-json-no-dup-keys= for plist; or
=print-alist-as-json-allow-dup-keys= for alist and
=print-plist-as-json-allow-dup-keys= as appropriate, to allow or
disallow dupliate keys as desired.

**** =JSON-VALUE= for special value
You may use the struct =json-value= (constructed with
=(make-json-value :print-form str)=) to represent a JSON value that
will be printed as the explicitly provided print form (printed with
"~A" format specified of =format=).

*** Main Functions
- =print-as-json=:

  A generic function, called as =(print-as-json x out)= to print a
  value =x= as JSON to the stream =out=, which defaults to
  =*json-output*= which is a synonym stream of =*standard-output*=.

  The default method prints with the above discussed mapping and
  conversion.  You may define methods for any value (possibly self
  defined class or struct) to customize the output.

  This is intended to be the main function for encoding JSON, and
  would be sufficient in most cases. However, there are specific
  functions if you want to treat a top-level value in a specific way.

- =print-real-as-json=:

  Print a real number as JSON. Note that ratios are printed as
  =single-float=.

- =print-string-as-json=:

  Print string using double quote, and properly escape the few
  characters required by JSON.

- =print-symbol-as-json=:

  Print symbol as JSON, which is printed as string after case
  conversion according to =*key-as-str-func*= as describe above.

- =print-list-as-json-array=:

  Print a Lisp list always as an array, and each element is printed
  with =print-as-json=.

- =print-array-as-json=:

  Print a Lisp array as JSON array, which is already the default
  behavior for Lisp arrays. Note that we only handle one-dimensional
  arrays.

- =print-hash-table-as-json=:

  Print a Lisp hash-table as JSON object, but the keys are in no
  guaranteed order. The keys are possibly case converted as described
  above.

- =print-plist-as-json=:

  Treat a list as plist (i.e. the even number index are keys, and odd
  number index are values), and print as JSON object, with possibly
  key conversion as describe above. Handling of duplicate keys is
  according to =*allow-dup-keys*= as describe above.

  - =print-plist-as-json-no-dup-keys=:

    Variant to not print duplicate keys for plist, and use the first
    key.

  - =print-plist-as-json-allow-dup-keys=:

    Variant to allow duplicate keys for plist, and print all the keys
    in the order they appear.

- =print-alist-as-json=:

  Treat a list as alist (i.e. a list of cons cells of key and value
  pairs, i.e. =(key . value)=), and print as JSON object, with
  possibly key conversion as describe above. Handling of duplicate
  keys is according to =*allow-dup-keys*= as describe above.

  - =print-alist-as-json-no-dup-keys=:

    Variant to not print duplicate keys for alist, and use the first
    key.

  - =print-alist-as-json-allow-dup-keys=:

    Variant to allow duplicate keys for alist, and print all the keys in the
    order they appear.

- =make-plist-json-obj=:

  To construct a =plist-json-obj= struct, which explicitly marks a
  list to treat as plist, and this value could appear in any nested
  level (not just top-level) and still will be treated as plist.

- =make-alist-json-obj=:

  To construct a =alist-json-obj= struct, which explicitly marks a
  list to treat as alist, and this value could appear in any nested
  level (not just top-level) and still will be treated as plist.

- =as-json-obj=:

  To make a hash-table or list to be treated as JSON obj.

  For hash-table, return as is, because it will be printed as JSON
  object. For list, if the =car= is a cons, then guess it to be alist,
  and use =make-alist-json-obj= to wrap the list as =alist-json-obj=;
  otherwise guess it to be plist, and use =make-plist-json-obj= to
  wrap the list as =plist-json-obj=.

- =make-json-value=:

  To make a special value with its desired print value, as describe
  above.

*** Error condition
For objects that with no known method of encoding, an
=unencodable-value-error= condition would be signaled with =error=,
with the value, and optionally the context.

*** Customization
There are a few ways to customize the JSON printing:

- custom printing of any value:

  By defining method of =print-as-json=, basically any customization
  should be possible, but with varying amount of work.

- key conversion to string:

  By customizing =*key-as-str-func*=, any desired transformations on
  keys is possible.

  By customizing =*how-to-convert-key-case*=, the key conversion
  strategy could be tuned, as describe above.

  By customizing or pre-filling =*convert-key-to-str*=, the desired
  key conversion (not just case conversion) of selected symbols could
  be customized.

- special value:

  By using =json-value=, any special (constant) value could be
  printed.

** Limitation
- Lack of indentation:

  The JSON output has no indentation, i.e. it is printed on one line.
